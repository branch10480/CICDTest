# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    ENV["APP_NAME"] = "CICDTest"
    ENV["GITHUB_ACTIONS_PAGE"] = "https://github.com/branch10480/CICDTest/actions"
  end

  lane :test do
    begin
      post_message_to_slack(message: "Skack„Å∏„ÅÆÊäïÁ®øÊàêÂäüÔºÅ")
    rescue => e
      post_error_message_to_slack(message: e.message, e: e)
    end
  end

  desc "„Éì„É´„Éâ„Åó„Å¶AppStore Connect„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ, Crashlytics„Å∏dSYM„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ"
  lane :app_store do
    begin
      create_keychain_for_CI if is_ci
      match(
        type: "appstore",
        readonly: true,
        keychain_name: "CICDTest",
        keychain_password: ENV["MATCH_PASSWORD"]
      )
      current_build_number = app_store_build_number(
        live: false,
        app_identifier: "me.toshi-sv.cicdtest",
        initial_build_number: 0
      )
      increment_build_number(
        build_number: current_build_number + 1
      )
      gym(
        scheme: "CICDTest",
        configuration: "Release"
      )
      sh(
        "../script/upload-symbols",
        "-gsp", "../CICDTest/GoogleService-Info.plist",
        "-p", "ios",
        "CICDTest.app.dSYM.zip"
      )
      deliver(
        skip_screenshots: true,
        skip_metadata: true,
        submit_for_review: false,
        force: true
      )
      post_message_to_slack(message: "AppStore Connect „Å∏„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åüüéâ")
    rescue => e
      puts e.message
      puts e.backtrace.join("\n")
      post_error_message_to_slack(message: "AppStore Connect„Å∏„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åüüò≠", e: e)
      raise e
    end
  end

  private_lane :create_keychain_for_CI do
    create_keychain(
      name: "CICDTest",
      password: ENV["MATCH_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false,
      add_to_search_list: true
    )
  end

  def post_message_to_slack(message:)
    slack(
      message: message,
      success: true,
      slack_url: ENV["SLACK_WEB_HOOK_URL"],
      attachment_properties: {
        "blocks": [
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "*„Ç¢„Éó„É™Âêç* \n #{ENV["APP_NAME"]}"
            }
          }
#          {
#            "type": "section",
#            "text": {
#              "type": "mrkdwn",
#              "text": "*„Ç¢„Éó„É™Âêç* \n #{ENV["APP_NAME"]}"
#            }
#          }
#          {
#            "type": "section",
#            "text": {
#              "type": "mrkdwn",
#              "text": "*app store connect* \n https://appstoreconnect.apple.com/"
#            }
#          }
        ]
      }
    )
  end

  def post_error_message_to_slack(message:, e:)
    slack(
      message: message,
      success: false,
      slack_url: ENV["SLACK_WEB_HOOK_URL"],
      attachment_properties: {
        blocks: [
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "*„Ç¢„Éó„É™Âêç* \n #{ENV["APP_NAME"]}"
            }
          },
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "*error message* \n #{e.message}"
            }
          },
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "*github actions page* \n #{ENV["GITHUB_ACTIONS_PAGE"]}"
            }
          }
        ]
      }
    )
  end
end

